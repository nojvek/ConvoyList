"use strict";
var assert = require("assert");
var index_1 = require("../../index");
var csx_1 = require("../../csx");
describe('color', function () {
    describe('toString()', function () {
        it('handles named colors', function () {
            var c1 = csx_1.red.toString();
            assert.equal(c1, 'rgb(255,0,0)');
        });
        it('handles transparency', function () {
            var c1 = csx_1.transparent.toString();
            assert.equal(c1, 'rgba(0,0,0,0)');
        });
    });
    describe('rgba()', function () {
        it('handles rgb with numbers', function () {
            var color = csx_1.rgb(255, 0, 0);
            assert.equal(color, 'rgb(255,0,0)');
        });
    });
    describe('rgba()', function () {
        it('handles rgba with numbers', function () {
            var color = csx_1.rgba(255, 0, 0, 1);
            assert.equal(color, 'rgba(255,0,0,1)');
        });
        it('handles rgba with percent string', function () {
            var color = csx_1.rgba(255, 0, 0, '80%');
            assert.equal(color, 'rgba(255,0,0,0.8)');
        });
    });
    describe('hsl()', function () {
        it('handles negative hues', function () {
            var color1 = csx_1.hsl(-180, 1, .5).toString();
            var color2 = csx_1.hsl(180, 1, .5).toString();
            assert.equal(color1, color2);
        });
        it('handles out of range hues', function () {
            var color1 = csx_1.hsl(90, 1, .5).toString();
            var color2 = csx_1.hsl(360 + 90, 1, .5).toString();
            var color3 = csx_1.hsl(-360 - 270, 1, .5).toString();
            assert.equal(color1, color2);
            assert.equal(color1, color3);
        });
        it('handles hsl with percent strings', function () {
            var color = csx_1.hsl(0, '100%', '50%').toString();
            assert.equal(color, 'hsl(0,100%,50%)');
        });
        it('handles hsl with percent numbers', function () {
            var color = csx_1.hsl(0, 1, .5).toString();
            assert.equal(color, 'hsl(0,100%,50%)');
        });
        it('handles hsl in style', function () {
            index_1.reinit();
            index_1.style({
                backgroundColor: csx_1.hsl(0, '100%', '50%')
            });
            assert.equal(index_1.css(), '.f1ri67gz{background-color:hsl(0,100%,50%)}');
        });
        it('adds hsl into keyframes', function () {
            index_1.reinit();
            var colorAnimation = index_1.keyframes({
                from: {
                    backgroundColor: csx_1.hsl(250, '50%', '30%')
                },
                to: {
                    backgroundColor: csx_1.hsl(250, '50%', '50%')
                }
            });
            index_1.style({
                animationName: colorAnimation
            });
            assert.equal(index_1.css(), '@keyframes fic7j4e{from{background-color:hsl(250,50%,30%)}to{background-color:hsl(250,50%,50%)}}.f1f9piqr{animation-name:fic7j4e}');
        });
    });
    describe('hsla()', function () {
        it('handles hsla with percent numbers', function () {
            var color = csx_1.hsla(0, 1, .5, .1).toString();
            assert.equal(color, 'hsla(0,100%,50%,0.1)');
        });
        it('handles hsla with percent strings', function () {
            var color = csx_1.hsla(0, '100%', '50%', .1).toString();
            assert.equal(color, 'hsla(0,100%,50%,0.1)');
        });
        it('adds hsla into style', function () {
            index_1.reinit();
            index_1.style({
                backgroundColor: csx_1.hsla(0, '100%', '50%', .1)
            });
            assert.equal(index_1.css(), '.f8x8s41{background-color:hsla(0,100%,50%,0.1)}');
        });
    });
    it('converts from a named color to rgb', function () {
        var color1 = csx_1.red.toString();
        var color2 = csx_1.rgb(255, 0, 0).toString();
        assert.equal(color1, color2);
    });
    describe('color()', function () {
        it('converts from a hex color (3 digit) to rgb', function () {
            var color1 = csx_1.color('#FF0000').toString();
            var color2 = csx_1.rgb(255, 0, 0).toString();
            assert.equal(color1, color2);
        });
        it('converts from a hex color (6 digit) to rgb', function () {
            var color1 = csx_1.color('#F00').toString();
            var color2 = csx_1.rgb(255, 0, 0).toString();
            assert.equal(color1, color2);
        });
    });
    describe('toHexString()', function () {
        it('converts white to #FFFFFF', function () {
            var color = csx_1.white.toHexString();
            assert.equal(color, '#FFFFFF');
        });
        it('converts black to #000000', function () {
            var color = csx_1.black.toHexString();
            assert.equal(color, '#000000');
        });
        it('converts red to #FF0000', function () {
            var color = csx_1.red.toHexString();
            assert.equal(color, '#FF0000');
        });
        it('converts green to #008000', function () {
            var color = csx_1.green.toHexString();
            assert.equal(color, '#008000');
        });
        it('converts blue to #0000FF', function () {
            var color = csx_1.blue.toHexString();
            assert.equal(color, '#0000FF');
        });
        it('converts rgb(0, 127.5, 0) to #009900', function () {
            var color = csx_1.rgb(0, 127.5, 0).toHexString();
            assert.equal(color, '#008000');
        });
    });
    describe('toHSL()', function () {
        it('converts from a named color to hsl', function () {
            var color1 = csx_1.red.toHSL().toString();
            var color2 = csx_1.hsl(0, 1, .5).toString();
            assert.equal(color1, color2);
        });
        it('converts from rgb to hsl', function () {
            var color1 = csx_1.rgb(255, 0, 0).toHSL().toString();
            var color2 = csx_1.hsl(0, 1, .5).toString();
            assert.equal(color1, color2);
        });
    });
    describe('toHSLA()', function () {
        it('converts from a named color to hsla', function () {
            var color1 = csx_1.red.toHSLA().toString();
            var color2 = csx_1.hsla(0, 1, .5, 1).toString();
            assert.equal(color1, color2);
        });
        it('converts from rgb to hsla', function () {
            var color1 = csx_1.rgb(255, 0, 0).toHSLA().toString();
            var color2 = csx_1.hsla(0, 1, .5, 1).toString();
            assert.equal(color1, color2);
        });
        it('converts from rgba to hsla', function () {
            var color1 = csx_1.rgba(255, 0, 0, .5).toHSLA().toString();
            var color2 = csx_1.hsla(0, 1, .5, .5).toString();
            assert.equal(color1, color2);
        });
    });
    describe('toRGB()', function () {
        it('converts from a named color to rgba', function () {
            var color1 = csx_1.red.toRGBA().toString();
            var color2 = csx_1.rgba(255, 0, 0, 1).toString();
            assert.equal(color1, color2);
        });
        it('converts from hsl to rgb', function () {
            var color1 = csx_1.hsl(0, 1, .5).toRGB().toString();
            var color2 = csx_1.rgb(255, 0, 0).toString();
            assert.equal(color1, color2);
        });
        it('converts from hsla to rgb', function () {
            var color1 = csx_1.hsla(0, 1, .5, .5).toRGB().toString();
            var color2 = csx_1.rgb(255, 0, 0).toString();
            assert.equal(color1, color2);
        });
    });
    describe('toRGBA()', function () {
        it('converts from hsla to rgba', function () {
            var color1 = csx_1.hsla(0, 1, .5, .5).toRGBA().toString();
            var color2 = csx_1.rgba(255, 0, 0, .5).toString();
            assert.equal(color1, color2);
        });
    });
    describe('red()', function () {
        it('returns the red channel from rgb', function () {
            var color1 = csx_1.rgb(255, 0, 0);
            assert.equal(255, color1.red());
        });
        it('returns the red channel from rgba', function () {
            var color1 = csx_1.rgba(255, 0, 0, .5);
            assert.equal(255, color1.red());
        });
    });
    describe('green()', function () {
        it('returns the green channel from rgb', function () {
            var color1 = csx_1.rgb(0, 255, 0);
            assert.equal(255, color1.green());
        });
        it('returns the green channel from rgba', function () {
            var color1 = csx_1.rgba(0, 255, 0, .5);
            assert.equal(255, color1.green());
        });
    });
    describe('blue()', function () {
        it('returns the blue channel from rgb', function () {
            var color1 = csx_1.rgb(0, 0, 255);
            assert.equal(255, color1.blue());
        });
        it('returns the blue channel from rgba', function () {
            var color1 = csx_1.rgba(0, 0, 255, .5);
            assert.equal(255, color1.blue());
        });
    });
    describe('opacity()', function () {
        it('returns the alpha channel from rgb', function () {
            var color1 = csx_1.rgb(0, 0, 0);
            assert.equal(1, color1.alpha());
            assert.equal(1, color1.opacity());
        });
        it('returns the alpha channel from rgba', function () {
            var color1 = csx_1.rgba(0, 0, 0, .5);
            assert.equal(.5, color1.alpha());
            assert.equal(.5, color1.opacity());
        });
    });
    describe('invert()', function () {
        it('inverts rgb', function () {
            var color1 = csx_1.rgb(255, 0, 0).invert().toString();
            var color2 = csx_1.cyan.toString();
            assert.equal(color1, color2);
        });
        it('inverts rgba', function () {
            var color1 = csx_1.rgba(255, 0, 0, .5).invert().toString();
            var color2 = csx_1.cyan.fade(.5).toString();
            assert.equal(color1, color2);
        });
        it('inverts hsl', function () {
            var color1 = csx_1.hsl(0, 1, .5).invert().toString();
            var color2 = csx_1.cyan.toString();
            assert.equal(color1, color2);
        });
        it('inverts hsla', function () {
            var color1 = csx_1.hsla(0, 1, .5, 1).invert().toString();
            var color2 = csx_1.cyan.fade(1).toString();
            assert.equal(color1, color2);
        });
    });
    describe('lighten()', function () {
        it('lightens black to white', function () {
            var color1 = csx_1.black.lighten(1).toString();
            var color2 = csx_1.white.toHSL().toString();
            assert.equal(color1, color2);
        });
        it('lightens black to gray', function () {
            var color1 = csx_1.black.lighten(.5).toString();
            var color2 = csx_1.hsl(0, 0, .5).toString();
            assert.equal(color1, color2);
        });
    });
    describe('darken()', function () {
        it('changes white to black', function () {
            var color1 = csx_1.white.darken(1).toString();
            var color2 = csx_1.black.toHSL().toString();
            assert.equal(color1, color2);
        });
        it('changes black to gray', function () {
            var color1 = csx_1.white.darken(.5).toString();
            var color2 = csx_1.hsl(0, 0, .5).toString();
            assert.equal(color1, color2);
        });
    });
    describe('saturate()', function () {
        it('changes white to midred', function () {
            var color1 = csx_1.hsl(0, 0, 1).saturate(.5).toString();
            var color2 = csx_1.hsl(0, .5, 1).toString();
            assert.equal(color1, color2);
        });
        it('changes white to red', function () {
            var color1 = csx_1.hsl(0, 0, 1).saturate(1).toString();
            var color2 = csx_1.hsl(0, 1, 1).toString();
            assert.equal(color1, color2);
        });
    });
    describe('desaturate()', function () {
        it('changes red to midred', function () {
            var color1 = csx_1.hsl(0, 1, 1).desaturate(.5).toString();
            var color2 = csx_1.hsl(0, .5, 1).toString();
            assert.equal(color1, color2);
        });
        it('changes red to white', function () {
            var color1 = csx_1.red.desaturate(1).toString();
            var color2 = csx_1.hsl(0, 0, .5).toString();
            assert.equal(color1, color2);
        });
    });
    describe('grayscale()', function () {
        it('handles red', function () {
            var color1 = csx_1.red.grayscale();
            assert.equal(color1.hue(), 0);
            assert.equal(color1.saturation(), 0);
            assert.equal(Math.round(color1.lightness() * 100), 50);
        });
        it('handles green', function () {
            var color1 = csx_1.green.grayscale();
            assert.equal(color1.hue(), 120);
            assert.equal(color1.saturation(), 0);
            assert.equal(Math.round(color1.lightness() * 100), 25);
        });
        it('handles blue', function () {
            var color1 = csx_1.blue.grayscale();
            assert.equal(color1.hue(), 240);
            assert.equal(color1.saturation(), 0);
            assert.equal(Math.round(color1.lightness() * 100), 50);
        });
        it('handles white', function () {
            var color1 = csx_1.white.grayscale().toString();
            var color2 = csx_1.hsl(0, 0, 1).toString();
            assert.equal(color1, color2);
        });
        it('handles black', function () {
            var color1 = csx_1.black.grayscale().toString();
            var color2 = csx_1.hsl(0, 0, 0).toString();
            assert.equal(color1, color2);
        });
    });
    describe('fade()', function () {
        it('changes rgb to rgba', function () {
            var color1 = csx_1.rgb(255, 255, 255).fade(1).toString();
            var color2 = csx_1.rgba(255, 255, 255, 1).toString();
            assert.equal(color1, color2);
        });
        it('changes hsl to hsla', function () {
            var color1 = csx_1.hsl(0, 0, 1).fade(1).toString();
            var color2 = csx_1.hsla(0, 0, 1, 1).toString();
            assert.equal(color1, color2);
        });
        it('clamps < 0 at 0% opacity', function () {
            var color1 = csx_1.rgba(255, 0, 0, 0).fade(-.5).toString();
            var color2 = csx_1.rgba(255, 0, 0, 0).toString();
            assert.equal(color1, color2);
        });
        it('sets 0 to 0% opacity', function () {
            var color1 = csx_1.rgba(255, 0, 0, 0).fade(0).toString();
            var color2 = csx_1.rgba(255, 0, 0, 0).toString();
            assert.equal(color1, color2);
        });
        it('sets .5 to 50% opacity', function () {
            var color1 = csx_1.rgba(255, 0, 0, 0).fade(.5).toString();
            var color2 = csx_1.rgba(255, 0, 0, .5).toString();
            assert.equal(color1, color2);
        });
        it('sets 1 to 100% opacity', function () {
            var color1 = csx_1.rgba(255, 0, 0, 0).fade(1).toString();
            var color2 = csx_1.rgba(255, 0, 0, 1).toString();
            assert.equal(color1, color2);
        });
        it('clamps > 1 to 100% opacity', function () {
            var color1 = csx_1.rgba(255, 0, 0, 0).fade(1.5).toString();
            var color2 = csx_1.rgba(255, 0, 0, 1).toString();
            assert.equal(color1, color2);
        });
    });
    describe('fadeOut', function () {
        it('clamps at 0%', function () {
            var color1 = csx_1.rgba(255, 0, 0, 0).fadeOut(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, 0).toString();
            assert.equal(color1, color2);
        });
        it('.75 = 1 - .25', function () {
            var color1 = csx_1.rgba(255, 0, 0, 1).fadeOut(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, .75).toString();
            assert.equal(color1, color2);
        });
        it('.5 = .75 - .25', function () {
            var color1 = csx_1.rgba(255, 0, 0, .75).fadeOut(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, .5).toString();
            assert.equal(color1, color2);
        });
        it('.25 = .5 - .25', function () {
            var color1 = csx_1.rgba(255, 0, 0, .5).fadeOut(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, .25).toString();
            assert.equal(color1, color2);
        });
        it('0 = .25 - .25', function () {
            var color1 = csx_1.rgba(255, 0, 0, .25).fadeOut(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, 0).toString();
            assert.equal(color1, color2);
        });
    });
    describe('fadeIn', function () {
        it('.25 = 0 - .25', function () {
            var color1 = csx_1.rgba(255, 0, 0, 0).fadeIn(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, .25).toString();
            assert.equal(color1, color2);
        });
        it('.5 = .25 - .25', function () {
            var color1 = csx_1.rgba(255, 0, 0, .25).fadeIn(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, .5).toString();
            assert.equal(color1, color2);
        });
        it('.75 = .5 - .25', function () {
            var color1 = csx_1.rgba(255, 0, 0, .5).fadeIn(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, .75).toString();
            assert.equal(color1, color2);
        });
        it('1 = .75 - .25', function () {
            var color1 = csx_1.rgba(255, 0, 0, .75).fadeIn(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, 1).toString();
            assert.equal(color1, color2);
        });
        it('clamps at 100%', function () {
            var color1 = csx_1.rgba(255, 0, 0, 1).fadeIn(.25).toString();
            var color2 = csx_1.rgba(255, 0, 0, 1).toString();
            assert.equal(color1, color2);
        });
    });
    describe('mix()', function () {
        // $c0: mix(red, green);
        // $c1: mix(red, blue);
        // $c2: mix(red, white);
        // $c3: mix(red, transparent);
        // $c4: mix(red, black);
        it('red + green', function () {
            // sass converts rgb to hex, so the actual result should be
            // rgb(127.5, 64, 0) if the numbers were preserved
            var color1 = csx_1.red.mix(csx_1.green).toString();
            var color2 = csx_1.rgb(128, 64, 0).toString();
            assert.equal(color1, color2);
        });
        it('red + blue', function () {
            var color1 = csx_1.red.mix(csx_1.blue).toString();
            var color2 = csx_1.purple.toString();
            assert.equal(color1, color2);
        });
        it('red + white', function () {
            var color1 = csx_1.red.mix(csx_1.white).toString();
            var color2 = csx_1.rgb(255, 128, 128).toString();
            assert.equal(color1, color2);
        });
        it('red + transparent', function () {
            var color1 = csx_1.red.mix(csx_1.transparent).toString();
            var color2 = csx_1.rgba(255, 0, 0, .5).toString();
            assert.equal(color1, color2);
        });
        it('red + black', function () {
            var color1 = csx_1.red.mix(csx_1.black).toString();
            var color2 = csx_1.maroon.toString();
            assert.equal(color1, color2);
        });
    });
    describe('tint()', function () {
        it('changed red to a lighter red', function () {
            var color1 = csx_1.red.tint(.3).toString();
            // color2 was tested on the SASS compiler with mix(white, red, 30%)
            var color2 = csx_1.rgb(255, 77, 77).toString();
            assert.equal(color1, color2);
        });
    });
    describe('shade()', function () {
        it('changed red to a darker red', function () {
            var color1 = csx_1.red.shade(.3).toString();
            // color2 was tested on the SASS compiler with mix(black, red, 30%)
            var color2 = csx_1.rgb(179, 0, 0).toString();
            assert.equal(color1, color2);
        });
    });
});

"use strict";
var index_1 = require("../../index");
var csx_1 = require("../../csx");
var assert = require("assert");
describe("csx/gradient", function () {
    it("linear-gradient should resolve", function () {
        var redBlue = csx_1.linearGradient('top left', 'red', 'blue').toString();
        assert.equal(redBlue, 'linear-gradient(top left,red,blue)');
    });
    it("style should resolve linear-gradient correctly", function () {
        index_1.reinit();
        index_1.style({
            backgroundImage: csx_1.linearGradient('top left', 'red', 'blue')
        });
        assert.equal(index_1.css(), '.fw0gyi9{background-image:linear-gradient(top left,red,blue)}');
    });
    it("linear-gradient should resolve colors inside of it", function () {
        var redBlue = csx_1.linearGradient('top left', csx_1.hsl(0, '100%', '50%'), ['blue', '40%']).toString();
        assert.equal(redBlue, 'linear-gradient(top left,hsl(0,100%,50%),blue 40%)');
    });
    it("style should resolve linear-gradient with colors inside of it", function () {
        index_1.reinit();
        index_1.style({
            backgroundImage: csx_1.linearGradient('top left', csx_1.hsl(0, '100%', '50%'), ['blue', '40%'])
        });
        assert.equal(index_1.css(), '.f20pb75{background-image:linear-gradient(top left,hsl(0,100%,50%),blue 40%)}');
    });
    it("repeating-linear-gradient should resolve", function () {
        var redBlue = csx_1.repeatingLinearGradient('top left', 'red', 'blue').toString();
        assert.equal(redBlue, 'repeating-linear-gradient(top left,red,blue)');
    });
    it("style should resolve repeating-linear-gradient correctly", function () {
        index_1.reinit();
        index_1.style({
            backgroundImage: csx_1.repeatingLinearGradient('top left', 'red', 'blue')
        });
        assert.equal(index_1.css(), '.f9s170r{background-image:repeating-linear-gradient(top left,red,blue)}');
    });
});

"use strict";
var _1 = require("../");
var formatting_1 = require("../formatting");
var isTypeArraySupported = typeof Float32Array === 'undefined';
var RGB = 0, HSL = 1, R = 0, G = 1, B = 2, H = 0, S = 1, L = 2, A = 3;
/**
 * Map of Color converters.  By subtracting the from-format from the to-format, we can
 * quickly map to the right converter. 1-2 and 2-1 yield different results, so this
 * allows us to choose the right converter observing the direction correcly
 */
var converters = (_a = {},
    _a[RGB - HSL] = RGBtoHSL,
    _a[HSL - RGB] = HSLtoRGB,
    _a);
/**
 * Describe the ceiling for each color channel for each format
 */
var maxChannelValues = (_b = {},
    _b[RGB] = colorArray(255, 255, 255, 1),
    _b[HSL] = colorArray(360, 1, 1, 1),
    _b);
/**
 * Creates a color from a hex color code or named color.
 * e.g. color('red') or color('#FF0000') or color('#F00'))
 */
function color(value) {
    return parseNamedColor(value) || parseHexCode(value) || parseNamedColor('red');
}
exports.color = color;
/**
 * Creates a color from hue, saturation, and lightness.  Alpha is automatically set to 100%
 */
function hsl(hue, saturation, lightness) {
    return new ColorHelper(HSL, modDegrees(hue), formatting_1.ensurePercent(saturation), formatting_1.ensurePercent(lightness), 1, false);
}
exports.hsl = hsl;
/**
 * Creates a color from hue, saturation, lightness, and alpha
 */
function hsla(hue, saturation, lightness, opacity) {
    return new ColorHelper(HSL, modDegrees(hue), formatting_1.ensurePercent(saturation), formatting_1.ensurePercent(lightness), formatting_1.ensurePercent(opacity), true);
}
exports.hsla = hsla;
/**
 * Creates a color form the red, blue, and green color space.  Alpha is automatically set to 100%
 */
function rgb(red, blue, green) {
    return new ColorHelper(RGB, red, blue, green, 1, false);
}
exports.rgb = rgb;
/**
 * Creates a color form the red, blue, green, and alpha in the color space
 */
function rgba(red, blue, green, alpha) {
    return new ColorHelper(RGB, red, blue, green, formatting_1.ensurePercent(alpha), true);
}
exports.rgba = rgba;
/**
 * A CSS Color.  Includes utilities for converting between color types
 */
var ColorHelper = (function () {
    function ColorHelper(format, c0, c1, c2, c3, hasAlpha) {
        this.type = 'color';
        this._format = format;
        this._hasAlpha = hasAlpha;
        this._values = colorArray(clampColor(format, 0, c0), clampColor(format, 1, c1), clampColor(format, 2, c2), clampColor(format, 3, c3));
    }
    /**
     * Converts the stored color into string form (which is used by Free Style)
     */
    ColorHelper.prototype.toString = function () {
        var _a = this._values, c1 = _a[0], c2 = _a[1], c3 = _a[2], c4 = _a[3];
        var format = this._format;
        var hasAlpha = this._hasAlpha;
        switch (format) {
            case HSL:
                return hasAlpha
                    ? _1.cssFunction('hsla', c1, formatting_1.formatPercent(c2), formatting_1.formatPercent(c3), c4)
                    : _1.cssFunction('hsl', c1, formatting_1.formatPercent(c2), formatting_1.formatPercent(c3));
            case RGB:
                return hasAlpha
                    ? _1.cssFunction('rgba', c1, c2, c3, c4)
                    : _1.cssFunction('rgb', c1, c2, c3);
        }
        // throw an error?
        throw new Error('Invalid color format');
    };
    /**
     * Converts to hex rgb(255, 255, 255) to #FFFFFF
     */
    ColorHelper.prototype.toHexString = function () {
        var v = (this._format === RGB ? this : this.toRGB())._values;
        return '#' + (toHex(v[R]) + toHex(v[G]) + toHex(v[B])).toUpperCase();
    };
    /**
     * Converts to the Hue, Saturation, Lightness color space
     */
    ColorHelper.prototype.toHSL = function () {
        var v = this._values;
        return convert(this._format, HSL, v[H], v[S], v[L], 1, false);
    };
    /**
     * Converts to the Hue, Saturation, Lightness color space and adds an alpha channel
     */
    ColorHelper.prototype.toHSLA = function () {
        var v = this._values;
        return convert(this._format, HSL, v[H], v[S], v[L], v[A], true);
    };
    /**
     * Converts to the Red, Green, Blue color space
     */
    ColorHelper.prototype.toRGB = function () {
        var v = this._values;
        return convert(this._format, RGB, v[R], v[G], v[B], 1, false);
    };
    /**
     * Converts to the Red, Green, Blue color space and adds an alpha channel
     */
    ColorHelper.prototype.toRGBA = function () {
        var v = this._values;
        return convert(this._format, RGB, v[R], v[G], v[B], v[A], true);
    };
    ColorHelper.prototype.red = function () {
        return (this._format === RGB ? this : this.toRGB())._values[0];
    };
    ColorHelper.prototype.green = function () {
        return (this._format === RGB ? this : this.toRGB())._values[1];
    };
    ColorHelper.prototype.blue = function () {
        return (this._format === RGB ? this : this.toRGB())._values[2];
    };
    ColorHelper.prototype.hue = function () {
        return (this._format === HSL ? this : this.toHSL())._values[0];
    };
    ColorHelper.prototype.saturation = function () {
        return (this._format === HSL ? this : this.toHSL())._values[1];
    };
    ColorHelper.prototype.lightness = function () {
        return (this._format === HSL ? this : this.toHSL())._values[2];
    };
    ColorHelper.prototype.alpha = function () {
        return this._values[A];
    };
    ColorHelper.prototype.opacity = function () {
        return this.alpha();
    };
    ColorHelper.prototype.invert = function () {
        var v = (this._format === RGB ? this : this.toRGB())._values;
        return new ColorHelper(RGB, 255 - v[R], 255 - v[G], 255 - v[B], v[A], this._hasAlpha);
    };
    ColorHelper.prototype.lighten = function (percent) {
        var v = (this._format === HSL ? this : this.toHSL())._values;
        var max = maxChannelValues[HSL][L];
        var l = v[L] + (max * formatting_1.ensurePercent(percent));
        return new ColorHelper(HSL, v[H], v[S], l, v[A], this._hasAlpha);
    };
    ColorHelper.prototype.darken = function (percent) {
        var v = (this._format === HSL ? this : this.toHSL())._values;
        var max = maxChannelValues[HSL][L];
        var l = v[L] - (max * formatting_1.ensurePercent(percent));
        return new ColorHelper(HSL, v[H], v[S], l, v[A], this._hasAlpha);
    };
    ColorHelper.prototype.saturate = function (percent) {
        var v = (this._format === HSL ? this : this.toHSL())._values;
        var max = maxChannelValues[HSL][S];
        var s = v[S] + (max * formatting_1.ensurePercent(percent));
        return new ColorHelper(HSL, v[H], s, v[L], v[A], this._hasAlpha);
    };
    ColorHelper.prototype.desaturate = function (percent) {
        var v = (this._format === HSL ? this : this.toHSL())._values;
        var max = maxChannelValues[HSL][S];
        var s = v[S] - (max * formatting_1.ensurePercent(percent));
        return new ColorHelper(HSL, v[H], s, v[L], v[A], this._hasAlpha);
    };
    ColorHelper.prototype.grayscale = function () {
        return this.desaturate(1);
    };
    ColorHelper.prototype.fade = function (percent) {
        var v = this._values;
        var a = clampColor(RGB, A, formatting_1.ensurePercent(percent));
        return new ColorHelper(this._format, v[R], v[G], v[B], a, true);
    };
    ColorHelper.prototype.fadeOut = function (percent) {
        var v = this._values;
        var a = clampColor(RGB, A, v[A] - formatting_1.ensurePercent(percent));
        return new ColorHelper(this._format, v[R], v[G], v[B], a, true);
    };
    ColorHelper.prototype.fadeIn = function (percent) {
        var v = this._values;
        var a = clampColor(RGB, A, v[A] + formatting_1.ensurePercent(percent));
        return new ColorHelper(this._format, v[R], v[G], v[B], a, true);
    };
    ColorHelper.prototype.mix = function (mixin, weight) {
        var color1 = this;
        var color2 = ensureColor(mixin);
        var c1 = (color1._format === RGB ? color1 : color1.toRGB())._values;
        var c2 = (color2._format === RGB ? color2 : color2.toRGB())._values;
        var p = weight === undefined ? .5 : weight;
        var w = 2 * p - 1;
        var a = Math.abs(c1[A] - c2[A]);
        var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
        var w2 = 1 - w1;
        return new ColorHelper(RGB, Math.round((c1[R] * w1 + c2[R] * w2)), Math.round((c1[G] * w1 + c2[G] * w2)), Math.round((c1[B] * w1 + c2[B] * w2)), c1[A] * p + c2[A] * (1 - p), color1._hasAlpha || color2._hasAlpha);
    };
    ColorHelper.prototype.tint = function (weight) {
        return exports.white.mix(this, weight);
    };
    ColorHelper.prototype.shade = function (weight) {
        return exports.black.mix(this, weight);
    };
    return ColorHelper;
}());
exports.ColorHelper = ColorHelper;
/**
 * Named colors in the CSS spec. They must be loaded after exported functions and constructor
 *
 */
var namedColors = {
    aliceblue: rgb(240, 248, 245),
    antiquewhite: rgb(250, 235, 215),
    aqua: rgb(0, 255, 255),
    aquamarine: rgb(127, 255, 212),
    azure: rgb(240, 255, 255),
    beige: rgb(245, 245, 220),
    bisque: rgb(255, 228, 196),
    black: rgb(0, 0, 0),
    blanchedalmond: rgb(255, 235, 205),
    blue: rgb(0, 0, 255),
    blueviolet: rgb(138, 43, 226),
    brown: rgb(165, 42, 42),
    burlywood: rgb(222, 184, 35),
    cadetblue: rgb(95, 158, 160),
    chartreuse: rgb(127, 255, 0),
    chocolate: rgb(210, 105, 30),
    coral: rgb(255, 127, 80),
    cornflowerblue: rgb(100, 149, 237),
    cornsilk: rgb(255, 248, 220),
    crimson: rgb(220, 20, 60),
    cyan: rgb(0, 255, 255),
    darkblue: rgb(0, 0, 139),
    darkcyan: rgb(0, 139, 139),
    darkgoldenrod: rgb(184, 134, 11),
    darkgray: rgb(169, 169, 169),
    darkgreen: rgb(0, 100, 0),
    darkgrey: rgb(169, 169, 169),
    darkkhaki: rgb(189, 183, 107),
    darkmagenta: rgb(139, 0, 139),
    darkolivegreen: rgb(85, 107, 47),
    darkorange: rgb(255, 140, 0),
    darkorchid: rgb(153, 50, 204),
    darkred: rgb(139, 0, 0),
    darksalmon: rgb(233, 150, 122),
    darkseagreen: rgb(143, 188, 143),
    darkslateblue: rgb(72, 61, 139),
    darkslategray: rgb(47, 79, 79),
    darkslategrey: rgb(47, 79, 79),
    darkturquoise: rgb(0, 206, 209),
    darkviolet: rgb(148, 0, 211),
    deeppink: rgb(255, 20, 147),
    deepskyblue: rgb(0, 191, 255),
    dimgray: rgb(105, 105, 105),
    dimgrey: rgb(105, 105, 105),
    dodgerblue: rgb(30, 144, 255),
    firebrick: rgb(178, 34, 34),
    floralwhite: rgb(255, 250, 240),
    forestgreen: rgb(34, 139, 34),
    fuchsia: rgb(255, 0, 255),
    gainsboro: rgb(220, 220, 220),
    ghostwhite: rgb(248, 248, 255),
    gold: rgb(255, 215, 0),
    goldenrod: rgb(218, 165, 32),
    gray: rgb(128, 128, 128),
    green: rgb(0, 128, 0),
    greenyellow: rgb(173, 255, 47),
    grey: rgb(128, 128, 128),
    honeydew: rgb(240, 255, 240),
    hotpink: rgb(255, 105, 180),
    indianred: rgb(205, 92, 92),
    indigo: rgb(75, 0, 130),
    ivory: rgb(255, 255, 240),
    khaki: rgb(240, 230, 140),
    lavender: rgb(230, 230, 250),
    lavenderblush: rgb(255, 240, 245),
    lawngreen: rgb(124, 252, 0),
    lemonchiffon: rgb(255, 250, 205),
    lightblue: rgb(173, 216, 230),
    lightcoral: rgb(240, 128, 128),
    lightcyan: rgb(224, 255, 255),
    lightgoldenrodyellow: rgb(250, 250, 210),
    lightgray: rgb(211, 211, 211),
    lightgreen: rgb(144, 238, 144),
    lightgrey: rgb(211, 211, 211),
    lightpink: rgb(255, 182, 193),
    lightsalmon: rgb(255, 160, 122),
    lightseagreen: rgb(32, 178, 170),
    lightskyblue: rgb(135, 206, 250),
    lightslategray: rgb(119, 136, 153),
    lightslategrey: rgb(119, 136, 153),
    lightsteelblue: rgb(176, 196, 222),
    lightyellow: rgb(255, 255, 224),
    lime: rgb(0, 255, 0),
    limegreen: rgb(50, 205, 50),
    linen: rgb(250, 240, 230),
    maroon: rgb(128, 0, 0),
    mediumaquamarine: rgb(102, 205, 170),
    mediumblue: rgb(0, 0, 205),
    mediumorchid: rgb(186, 85, 211),
    mediumpurple: rgb(147, 112, 219),
    mediumseagreen: rgb(60, 179, 113),
    mediumslateblue: rgb(123, 104, 238),
    mediumspringgreen: rgb(0, 250, 154),
    mediumturquoise: rgb(72, 209, 204),
    mediumvioletred: rgb(199, 21, 133),
    midnightblue: rgb(25, 25, 112),
    mintcream: rgb(245, 255, 250),
    mistyrose: rgb(255, 228, 225),
    moccasin: rgb(255, 228, 181),
    navajowhite: rgb(255, 222, 173),
    navy: rgb(0, 0, 128),
    oldlace: rgb(253, 245, 230),
    olive: rgb(128, 128, 0),
    olivedrab: rgb(107, 142, 35),
    orange: rgb(255, 165, 0),
    purple: rgb(128, 0, 128),
    rebeccapurple: rgb(102, 51, 153),
    red: rgb(255, 0, 0),
    silver: rgb(192, 192, 192),
    teal: rgb(0, 128, 128),
    transparent: rgba(0, 0, 0, 0),
    white: rgb(255, 255, 255),
    yellow: rgb(255, 255, 0)
};
exports.aliceblue = namedColors.aliceblue, exports.antiquewhite = namedColors.antiquewhite, exports.aqua = namedColors.aqua, exports.aquamarine = namedColors.aquamarine, exports.azure = namedColors.azure, exports.beige = namedColors.beige, exports.bisque = namedColors.bisque, exports.black = namedColors.black, exports.blanchedalmond = namedColors.blanchedalmond, exports.blue = namedColors.blue, exports.blueviolet = namedColors.blueviolet, exports.brown = namedColors.brown, exports.burlywood = namedColors.burlywood, exports.cadetblue = namedColors.cadetblue, exports.chartreuse = namedColors.chartreuse, exports.chocolate = namedColors.chocolate, exports.coral = namedColors.coral, exports.cornflowerblue = namedColors.cornflowerblue, exports.cornsilk = namedColors.cornsilk, exports.crimson = namedColors.crimson, exports.cyan = namedColors.cyan, exports.darkblue = namedColors.darkblue, exports.darkcyan = namedColors.darkcyan, exports.darkgoldenrod = namedColors.darkgoldenrod, exports.darkgray = namedColors.darkgray, exports.darkgreen = namedColors.darkgreen, exports.darkgrey = namedColors.darkgrey, exports.darkkhaki = namedColors.darkkhaki, exports.darkmagenta = namedColors.darkmagenta, exports.darkolivegreen = namedColors.darkolivegreen, exports.darkorange = namedColors.darkorange, exports.darkorchid = namedColors.darkorchid, exports.darkred = namedColors.darkred, exports.darksalmon = namedColors.darksalmon, exports.darkseagreen = namedColors.darkseagreen, exports.darkslateblue = namedColors.darkslateblue, exports.darkslategray = namedColors.darkslategray, exports.darkslategrey = namedColors.darkslategrey, exports.darkturquoise = namedColors.darkturquoise, exports.darkviolet = namedColors.darkviolet, exports.deeppink = namedColors.deeppink, exports.deepskyblue = namedColors.deepskyblue, exports.dimgray = namedColors.dimgray, exports.dimgrey = namedColors.dimgrey, exports.dodgerblue = namedColors.dodgerblue, exports.firebrick = namedColors.firebrick, exports.floralwhite = namedColors.floralwhite, exports.forestgreen = namedColors.forestgreen, exports.fuchsia = namedColors.fuchsia, exports.gainsboro = namedColors.gainsboro, exports.ghostwhite = namedColors.ghostwhite, exports.gold = namedColors.gold, exports.goldenrod = namedColors.goldenrod, exports.gray = namedColors.gray, exports.green = namedColors.green, exports.greenyellow = namedColors.greenyellow, exports.grey = namedColors.grey, exports.honeydew = namedColors.honeydew, exports.hotpink = namedColors.hotpink, exports.indianred = namedColors.indianred, exports.indigo = namedColors.indigo, exports.ivory = namedColors.ivory, exports.khaki = namedColors.khaki, exports.lavender = namedColors.lavender, exports.lavenderblush = namedColors.lavenderblush, exports.lawngreen = namedColors.lawngreen, exports.lemonchiffon = namedColors.lemonchiffon, exports.lightblue = namedColors.lightblue, exports.lightcoral = namedColors.lightcoral, exports.lightcyan = namedColors.lightcyan, exports.lightgoldenrodyellow = namedColors.lightgoldenrodyellow, exports.lightgray = namedColors.lightgray, exports.lightgreen = namedColors.lightgreen, exports.lightgrey = namedColors.lightgrey, exports.lightpink = namedColors.lightpink, exports.lightsalmon = namedColors.lightsalmon, exports.lightseagreen = namedColors.lightseagreen, exports.lightskyblue = namedColors.lightskyblue, exports.lightslategray = namedColors.lightslategray, exports.lightslategrey = namedColors.lightslategrey, exports.lightsteelblue = namedColors.lightsteelblue, exports.lightyellow = namedColors.lightyellow, exports.lime = namedColors.lime, exports.limegreen = namedColors.limegreen, exports.linen = namedColors.linen, exports.maroon = namedColors.maroon, exports.mediumaquamarine = namedColors.mediumaquamarine, exports.mediumblue = namedColors.mediumblue, exports.mediumorchid = namedColors.mediumorchid, exports.mediumpurple = namedColors.mediumpurple, exports.mediumseagreen = namedColors.mediumseagreen, exports.mediumslateblue = namedColors.mediumslateblue, exports.mediumspringgreen = namedColors.mediumspringgreen, exports.mediumturquoise = namedColors.mediumturquoise, exports.mediumvioletred = namedColors.mediumvioletred, exports.midnightblue = namedColors.midnightblue, exports.mintcream = namedColors.mintcream, exports.mistyrose = namedColors.mistyrose, exports.moccasin = namedColors.moccasin, exports.navajowhite = namedColors.navajowhite, exports.navy = namedColors.navy, exports.oldlace = namedColors.oldlace, exports.olive = namedColors.olive, exports.olivedrab = namedColors.olivedrab, exports.orange = namedColors.orange, exports.purple = namedColors.purple, exports.rebeccapurple = namedColors.rebeccapurple, exports.red = namedColors.red, exports.silver = namedColors.silver, exports.teal = namedColors.teal, exports.transparent = namedColors.transparent, exports.white = namedColors.white, exports.yellow = namedColors.yellow;
function toHex(n) {
    return (n < 16 ? '0' : '') + Math.round(n).toString(16);
}
function modDegrees(n) {
    return (n < 0 ? 360 : 0) + (n % 360);
}
function RGBtoHSL(c0, c1, c2, c3, hasAlpha) {
    var r = c0 / 255;
    var g = c1 / 255;
    var b = c2 / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    if (max === min) {
        h = 0;
    }
    else if (r === max) {
        h = (g - b) / delta;
    }
    else if (g === max) {
        h = 2 + (b - r) / delta;
    }
    else if (b === max) {
        h = 4 + (r - g) / delta;
    }
    else {
        h = 0;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
        h += 360;
    }
    var l = (min + max) / 2;
    var s;
    if (max === min) {
        s = 0;
    }
    else if (l <= 0.5) {
        s = delta / (max + min);
    }
    else {
        s = delta / (2 - max - min);
    }
    return new ColorHelper(HSL, h, s, l, c3, hasAlpha);
}
;
function HSLtoRGB(c0, c1, c2, c3, hasAlpha) {
    var h = c0 / 360;
    var s = c1;
    var l = c2;
    if (s === 0) {
        var val = l * 255;
        return new ColorHelper(RGB, val, val, val, c3, hasAlpha);
    }
    var t2 = l < .5 ? l * (1 + s) : l + s - l * s;
    var t1 = 2 * l - t2;
    var r = 0, g = 0, b = 0;
    for (var i = 0; i < 3; i++) {
        var t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
            t3++;
        }
        if (t3 > 1) {
            t3--;
        }
        var val = void 0;
        if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
        }
        else if (2 * t3 < 1) {
            val = t2;
        }
        else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        }
        else {
            val = t1;
        }
        val *= 255;
        // manually set variables instead of using an array
        if (i === 0) {
            r = val;
        }
        else if (i === 1) {
            g = val;
        }
        else {
            b = val;
        }
    }
    return new ColorHelper(RGB, r, g, b, c3, hasAlpha);
}
;
/**
 * Converts from one format to another format
 */
function convert(fromFormat, toFormat, c0, c1, c2, c3, hasAlpha) {
    return fromFormat === toFormat
        ? new ColorHelper(fromFormat, c0, c1, c2, c3, hasAlpha)
        : converters[fromFormat - toFormat](c0, c1, c2, c3, hasAlpha);
}
function colorArray(c0, c1, c2, c3) {
    if (!isTypeArraySupported) {
        return [c0 || 0, c1 || 0, c2 || 0, c3 || 0];
    }
    var a = new Float32Array(4);
    a[0] = c0 || 0;
    a[1] = c1 || 0;
    a[2] = c2 || 0;
    a[3] = c3 || 0;
    return a;
}
function clampColor(format, channel, value) {
    var min = 0;
    var max = maxChannelValues[format][channel];
    return value < min ? min : value > max ? max : value;
}
function ensureColor(c) {
    return c instanceof ColorHelper ? c : color(c);
}
function parseNamedColor(stringValue) {
    return namedColors[stringValue] || undefined;
}
function parseHexCode(stringValue) {
    var match = stringValue.match(/#(([a-f0-9]{6})|([a-f0-9]{3}))$/i);
    if (!match) {
        return undefined;
    }
    var hex = match[1];
    var hexColor = parseInt(hex.length === 3
        ? hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]
        : hex, 16);
    var r = (hexColor >> 16) & 0xFF;
    var b = (hexColor >> 8) & 0xFF;
    var g = hexColor & 0xFF;
    return new ColorHelper(RGB, r, b, g, 1, false);
}
;
var _a, _b;

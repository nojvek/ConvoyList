"use strict";
var _1 = require("../");
/**
 * Helper for the linear-gradient function in CSS
 * https://drafts.csswg.org/css-images-3/#funcdef-linear-gradient
 */
function linearGradient(position) {
    var colors = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        colors[_i - 1] = arguments[_i];
    }
    return {
        type: 'gradient',
        toString: function () { return _1.cssFunction.apply(void 0, ['linear-gradient', position].concat(colors.map(flattenColorStops))); }
    };
}
exports.linearGradient = linearGradient;
/**
 * Helper for the repeating-linear-gradient function in CSS
 * https://drafts.csswg.org/css-images-3/#funcdef-repeating-linear-gradient
 */
function repeatingLinearGradient(position) {
    var colors = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        colors[_i - 1] = arguments[_i];
    }
    return {
        type: 'gradient',
        toString: function () { return _1.cssFunction.apply(void 0, ['repeating-linear-gradient', position].concat(colors.map(flattenColorStops))); }
    };
}
exports.repeatingLinearGradient = repeatingLinearGradient;
/**
 * Single CSSColorStop => string conversion is like:
 * 'x'=>'x'
 * ['x', '50%'] => 'x 50%'
 **/
function flattenColorStops(c) {
    return Array.isArray(c) ? c.map(_1.ensureString).join(' ') : _1.ensureString(c);
}
